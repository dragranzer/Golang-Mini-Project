// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	peminjamans "github.com/dragranzer/Golang-Mini-Project/features/peminjamans"
	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// InsertData provides a mock function with given fields: data
func (_m *Data) InsertData(data peminjamans.Core) (peminjamans.Core, error) {
	ret := _m.Called(data)

	var r0 peminjamans.Core
	if rf, ok := ret.Get(0).(func(peminjamans.Core) peminjamans.Core); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(peminjamans.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(peminjamans.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllData provides a mock function with given fields:
func (_m *Data) SelectAllData() []peminjamans.Core {
	ret := _m.Called()

	var r0 []peminjamans.Core
	if rf, ok := ret.Get(0).(func() []peminjamans.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peminjamans.Core)
		}
	}

	return r0
}

// SelectDetailBookPinjam provides a mock function with given fields: id
func (_m *Data) SelectDetailBookPinjam(id int) []peminjamans.Core {
	ret := _m.Called(id)

	var r0 []peminjamans.Core
	if rf, ok := ret.Get(0).(func(int) []peminjamans.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peminjamans.Core)
		}
	}

	return r0
}
