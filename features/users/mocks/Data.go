// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "github.com/dragranzer/Golang-Mini-Project/features/users"
	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CheckEmailPass provides a mock function with given fields: email, pass
func (_m *Data) CheckEmailPass(email string, pass string) (bool, users.Core, error) {
	ret := _m.Called(email, pass)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(email, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 users.Core
	if rf, ok := ret.Get(1).(func(string, string) users.Core); ok {
		r1 = rf(email, pass)
	} else {
		r1 = ret.Get(1).(users.Core)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, pass)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InsertData provides a mock function with given fields: data
func (_m *Data) InsertData(data users.Core) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Core) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllData provides a mock function with given fields:
func (_m *Data) SelectAllData() []users.Core {
	ret := _m.Called()

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	return r0
}

// SelectDatabyEmail provides a mock function with given fields: email
func (_m *Data) SelectDatabyEmail(email string) (users.Core, error) {
	ret := _m.Called(email)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(string) users.Core); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDatabyID provides a mock function with given fields: id
func (_m *Data) SelectDatabyID(id int) (users.Core, error) {
	ret := _m.Called(id)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(int) users.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDatabyName provides a mock function with given fields: name
func (_m *Data) SelectDatabyName(name string) (users.Core, error) {
	ret := _m.Called(name)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(string) users.Core); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatabyID provides a mock function with given fields: id, newData
func (_m *Data) UpdateDatabyID(id int, newData users.Core) error {
	ret := _m.Called(id, newData)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, users.Core) error); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
